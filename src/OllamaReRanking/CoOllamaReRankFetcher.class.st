Class {
	#name : 'CoOllamaReRankFetcher',
	#superclass : 'CoFetcherDecorator',
	#instVars : [
		'completionContext'
	],
	#category : 'OllamaReRanking-Core',
	#package : 'OllamaReRanking',
	#tag : 'Core'
}

{ #category : 'accessing' }
CoOllamaReRankFetcher >> completionContext: aContext [ 

    completionContext := aContext
]

{ #category : 'accessing' }
CoOllamaReRankFetcher >> entriesDo: aBlock [ 

    | allResults reRanked |

    "1) Ask the wrapped fetcher (decoree) for all its results."
    allResults := OrderedCollection new.
    decoree entriesDo: [ :entry | allResults add: entry ].

    "2) Re-rank them via Ollama. 
       For example, pass the userâ€™s typed token + the candidate list to Ollama."
    reRanked := self ollamaReRank: allResults.

    "3) Yield them in the new order."
    reRanked do: [ :each | aBlock value: each ]
]

{ #category : 'accessing' }
CoOllamaReRankFetcher >> ollamaReRank: candidateEntries [ 

    | textUpToCaret rankedResponse api |
    textUpToCaret := completionContext source
        copyFrom: 1
        to: completionContext position.

    api := OllamaAPI new.

    "You have to decide on a suitable prompt or call 
     that passes 'candidateEntries' to Ollama and returns an ordering.
     For instance, you might build a JSON with { 'prompt': 'Rank these: X,Y,Z' } 
     or something similar. Then parse the response as a new ordering."
    rankedResponse := api reRankCandidates: candidateEntries withContext: textUpToCaret.

    "Return them in the Ollama-chosen order. 
     'rankedResponse' might be an Array of entry indexes or the actual entries in new order."
    ^ rankedResponse
]
